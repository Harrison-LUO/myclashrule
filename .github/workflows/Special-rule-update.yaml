name: Special-rule-update
on:
  push:
    branches: ["main"]
  pull_request:
    branches: ["main"]
  schedule:
    - cron: "20 */6 * * *"

jobs:
  Update-Special-rule:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Git
        run: |
          git config --global user.email "actions@github.com"
          git config --global user.name "GitHub Actions"

      - name: Update MyDirect.SERVER.list
        run: |
          if [ -f rules/MyDirect.SERVER.update.list ]; then
            cat rules/MyDirect.SERVER.update.list | while read line; do
              line=$(echo "$line" | tr -d '\r' | xargs)
              if [ -n "$line" ]; then
                if [[ "$line" == \#* ]]; then
                  continue
                fi
                if [[ "$line" =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; then
                  echo "IP-CIDR,$line/32,no-resolve" 
                elif [[ "$line" =~ ^[a-zA-Z0-9.-]+$ ]]; then
                  echo "DOMAIN-SUFFIX,$line"
                else 
                  echo "IP-CIDR6,$line/128,no-resolve" 
                fi
              fi
            done | sort -t, -k1,1 > rules/MyDirect.SERVER.list.new
            mv -f rules/MyDirect.SERVER.list.new rules/MyDirect.SERVER.list
            rm -rf rules/MyDirect.SERVER.update.list
          else
            echo "MyDirect.SERVER.update.list not found, skipping..."
          fi

      - name: Get MyDirect rules
        run: |
          cat rules/MyDirect.MANUAL.list rules/MyDirect.SERVER.list > rules/MyDirect.list.new
          mv -f rules/MyDirect.list.new rules/MyDirect.list

      - name: Update Reject.list
        run: |
          if  curl -f -s -o rules/pcdn.txt https://raw.githubusercontent.com/privacy-protection-tools/anti-AD/refs/heads/master/discretion/pcdn.txt && [[ -s rules/pcdn.txt ]]; then
            cat rules/pcdn.txt | while read line; do
              line=$(echo "$line" | tr -d '\r' | xargs)
              if [ -n "$line" ]; then
                if [[ "$line" == \#* ]]; then
                  continue
                fi
                if [[ "$line" =~ ^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$ ]]; then
                  echo "IP-CIDR,$line/32,no-resolve" 
                elif [[ "$line" =~ ^[a-zA-Z0-9.-]+$ ]]; then
                  echo "DOMAIN,$line"
                else 
                  echo "IP-CIDR6,$line/128,no-resolve" 
                fi
              fi
            done | sort -t, -k1,1 > rules/pcdn.list
            echo >> rules/pcdn.list
            if curl -f -s -o rules/httpdns.list https://raw.githubusercontent.com/VirgilClyne/GetSomeFries/main/ruleset/HTTPDNS.Block.list && [[ -s rules/httpdns.list ]]; then
              echo >> rules/httpdns.list
              > rules/httpdns.list.tmp
              while read -r line; do
                if [[ "$line" == *"IP-CIDR"* ]] && [[ "$line" != *"no-resolve"* ]]; then
                  echo "$line,no-resolve" >> rules/httpdns.list.tmp
                else
                  echo "$line" >> rules/httpdns.list.tmp
                fi
              done < rules/httpdns.list
              cat rules/httpdns.list.tmp rules/pcdn.list > rules/ForcedReject.list.new
              mv -f rules/ForcedReject.list.new rules/ForcedReject.list
              rm -f rules/httpdns.list rules/httpdns.list.tmp
            else
              echo "Failed to download or empty httpdns.list, exiting."
            fi
            rm -rf rules/pcdn.list rules/pcdn.txt
          else
            echo "Failed to download or empty pcdn.txt, exiting."
          fi

      - name: Download MyProxy rules
        run: |
          if  curl -f -s -o rules/app/Docker.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Docker/Docker.list && [[ -s rules/app/Docker.list ]]; then
          echo >> rules/app/Docker.list
            cat rules/app/Docker.list rules/MyProxy.MANUAL.list > rules/MyProxy.list.new
            mv -f rules/MyProxy.list.new rules/MyProxy.list
            rm -f rules/app/Docker.list
          else
            echo "Failed to download or empty Docker.list, exiting."
          fi

      - name: Download USSpecial rules
        run: |
          files=(
            "Copilot.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Copilot/Copilot.list"
            "Bing.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Bing/Bing.list"
            "Edge.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/MicrosoftEdge/MicrosoftEdge.list"
          )
          downloaded_files=()
          successful_downloads=() # Track only successful ones for cat
          download_dir="rules/app"
          for entry in "${files[@]}"; do
            IFS='|' read -r filename url <<< "$entry"
            output_path="${download_dir}/${filename}.tmp"
            downloaded_files+=("$output_path") # Add to list for cleanup later
            echo "Downloading $filename from $url..."
            if ! curl -f -L -s -o "$output_path" "$url" || [[ ! -s "$output_path" ]]; then
              echo "::error::Failed to download or empty file: $filename from $url. Skipping this file."
            else
              echo "Successfully downloaded $filename."
              echo >> "$output_path" # Add trailing newline only on success
              if [[ "$filename" == "Copilot.list" ]]; then
                 echo "# Manual additions for Copilot" >> "$output_path"
                 echo "DOMAIN,designer.microsoft.com" >> "$output_path"
                 echo "DOMAIN-SUFFIX,githubcopilot.com" >> "$output_path"
                 echo "DOMAIN,copilot-telemetry.githubusercontent.com" >> "$output_path"
                 echo "DOMAIN-SUFFIX,copilot-telemetry.githubusercontent.com" >> "$output_path"
                 echo "PROCESS-NAME,com.microsoft.copilot" >> "$output_path"
                 echo "PROCESS-NAME-REGEX,com\.microsoft\.copilot" >> "$output_path"
                 echo "PROCESS-NAME-REGEX,^(?=.*microsoft)(?=.*copilot).*$" >> "$output_path"
                 echo >> "$output_path"
              fi
              successful_downloads+=("$output_path")
            fi
          done

          if [ ${#successful_downloads[@]} -gt 0 ]; then
            cat "${successful_downloads[@]}" "${download_dir}/USSpecial.MANUAL.list" > "${download_dir}/USSpecial.list.new"
            sort -u "${download_dir}/USSpecial.list.new" -o "${download_dir}/USSpecial.list.new"
            mv -f "${download_dir}/USSpecial.list.new" "${download_dir}/USSpecial.list"
            echo "Generated USSpecial.list with available rules."
          else
            echo "::warning::All USSpecial component downloads failed. USSpecial.list not updated."
          fi

          echo "Cleaning up temporary USSpecial files..."
          rm -f "${downloaded_files[@]}" 

      - name: Download Bilibili rules
        run: |
          BILIBILI_LIST_NEW="rules/app/BiliBili.list.new"
          echo "Downloading Bilibili list..."
          if curl -f -s -o "$BILIBILI_LIST_NEW" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/BiliBili/BiliBili.list && [[ -s "$BILIBILI_LIST_NEW" ]]; then
            mv -f "$BILIBILI_LIST_NEW" rules/app/BiliBili.list
            echo "Downloaded BiliBili.list"
          else
            echo "::error::Failed to download or empty BiliBili.list. File not updated."
            rm -f "$BILIBILI_LIST_NEW" # Clean up potential empty file
          fi

      - name: Download Game rules
        run: |
          GAME_LIST_NEW="rules/app/Game.list.new"
          echo "Downloading Game list..."
          if curl -f -s -o "$GAME_LIST_NEW" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/Game.list && [[ -s "$GAME_LIST_NEW" ]]; then
            mv -f "$GAME_LIST_NEW" rules/app/Game.list
            echo "Downloaded Game.list"
          else
            echo "::error::Failed to download or empty Game.list. File not updated."
            rm -f "$GAME_LIST_NEW"
          fi

      - name: Download GameDLCN rules
        run: |
          files=(
            "SteamCN.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/SteamCN/SteamCN.list"
            "GameDownloadCN.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/GameDownloadCN/GameDownloadCN.list"
          )
          downloaded_files=()
          successful_downloads=()
          download_dir="rules/app"
          echo "Downloading GameDLCN components..."
          for entry in "${files[@]}"; do
            IFS='|' read -r filename url <<< "$entry"
            output_path="${download_dir}/${filename}.tmp"
            downloaded_files+=("$output_path")
            echo "Downloading $filename from $url..."
            if ! curl -f -L -s -o "$output_path" "$url" || [[ ! -s "$output_path" ]]; then
              echo "::error::Failed to download or empty file: $filename from $url. Skipping this file."
            else
              echo "Successfully downloaded $filename."
              echo >> "$output_path"
              successful_downloads+=("$output_path")
            fi
          done

          if [ ${#successful_downloads[@]} -gt 0 ]; then
             echo "Combining successfully downloaded GameDLCN rules..."
             cat "${successful_downloads[@]}" "${download_dir}/GameDLCN.MANUAL.list" > "${download_dir}/GameDLCN.list.new"
             sort -u "${download_dir}/GameDLCN.list.new" -o "${download_dir}/GameDLCN.list.new"
             mv -f "${download_dir}/GameDLCN.list.new" "${download_dir}/GameDLCN.list"
             echo "Generated GameDLCN.list with available rules."
          else
             echo "::warning::All GameDLCN component downloads failed. GameDLCN.list not updated."
             # Optionally: cp "${download_dir}/GameDLCN.MANUAL.list" "${download_dir}/GameDLCN.list"
          fi

          echo "Cleaning up temporary GameDLCN files..."
          rm -f "${downloaded_files[@]}"

      - name: Download GameDL rules
        run: |
          GAMEDL_LIST_NEW="rules/app/GameDL.list.new"
          echo "Downloading GameDL list..."
          if curl -f -s -o "$GAMEDL_LIST_NEW" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Game/GameDownload/GameDownload.list && [[ -s "$GAMEDL_LIST_NEW" ]]; then
            mv -f "$GAMEDL_LIST_NEW" rules/app/GameDL.list
            echo "Downloaded GameDL.list"
          else
            echo "::error::Failed to download or empty GameDownload.list. File not updated."
            rm -f "$GAMEDL_LIST_NEW"
          fi

      - name: Download USAPP rules
        run: |
          files=(
            "TwitterAndX.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Twitter/Twitter.list"
            "FacebookAndMeta.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Facebook/Facebook.list"
            "GoogleVoice.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GoogleVoice/GoogleVoice.list"
            "Reddit.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Reddit/Reddit.list"
            "PayPal.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/refs/heads/master/rule/Clash/PayPal/PayPal.list"
            "USMedia.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/USMedia/USMedia.list"
            "OpenAI.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OpenAI/OpenAI.list"
            "Claude.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Claude/Claude.list"
            "Gemini.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Gemini/Gemini.list"
            "AIACL4SSR.list|https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/master/Clash/Ruleset/AI.list"
            "Dropbox.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Dropbox/Dropbox.list"
          )
          downloaded_files=() # Track all attempted temp files for cleanup
          successful_downloads=() # Track only successful ones for cat
          download_dir="rules/app"
          echo "Downloading USAPP components..."
          for entry in "${files[@]}"; do
            IFS='|' read -r filename url <<< "$entry"
            output_path="${download_dir}/${filename}.tmp"
            downloaded_files+=("$output_path") # Add to list for cleanup later
            echo "Downloading $filename from $url..."
            if ! curl -f -L -s -o "$output_path" "$url" || [[ ! -s "$output_path" ]]; then
              echo "::error::Failed to download or empty file: $filename from $url. Skipping this file."
              # Do not add to successful_downloads
            else
              echo "Successfully downloaded $filename."
              echo >> "$output_path" # Add trailing newline only on success
              successful_downloads+=("$output_path") # Add path of successful download
            fi
          done

          if [ ${#successful_downloads[@]} -gt 0 ]; then
             echo "Combining successfully downloaded USAPP rules..."
             cat "${successful_downloads[@]}" "${download_dir}/USAPP.MANUAL.list" > "${download_dir}/USAPP.list.new"
             echo >> "${download_dir}/USAPP.list.new" # Ensure trailing newline
             sort -u "${download_dir}/USAPP.list.new" -o "${download_dir}/USAPP.list.new"
             mv -f "${download_dir}/USAPP.list.new" "${download_dir}/USAPP.list"
             echo "Generated USAPP.list with available rules."
          else
             echo "::warning::All USAPP component downloads failed. USAPP.list not generated from downloads."
             # Optionally, copy manual list if all downloads fail?
             echo "Copying USAPP.MANUAL.list to USAPP.list as fallback."
             cp "${download_dir}/USAPP.MANUAL.list" "${download_dir}/USAPP.list"
          fi
          echo "Cleaning up temporary USAPP files..."
          rm -f "${downloaded_files[@]}"

      - name: Download SGAPP rules
        run: |
          cp rules/app/SGAPP.MANUAL.list rules/app/SGAPP.list.new
          mv -f rules/app/SGAPP.list.new rules/app/SGAPP.list

      - name: Download UKAPP rules
        run: |
          UKMEDIA_LIST_TMP="rules/app/UKMedia.list.tmp"
          UKAPP_LIST_NEW="rules/app/UKAPP.list.new"
          echo "Downloading UKMedia list..."
          if curl -f -s -o "$UKMEDIA_LIST_TMP" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/UKMedia/UKMedia.list && [[ -s "$UKMEDIA_LIST_TMP" ]]; then
            echo "UKMedia list downloaded successfully."
            echo >> "$UKMEDIA_LIST_TMP"
            cat "$UKMEDIA_LIST_TMP" rules/app/UKAPP.MANUAL.list > "$UKAPP_LIST_NEW"
            sort -u "$UKAPP_LIST_NEW" -o "$UKAPP_LIST_NEW"
            mv -f "$UKAPP_LIST_NEW" rules/app/UKAPP.list
            echo "Generated UKAPP.list"
            rm -f "$UKMEDIA_LIST_TMP"
          else
            echo "::error::Failed to download or empty UKMedia.list. UKAPP.list will be generated from MANUAL only."
            rm -f "$UKMEDIA_LIST_TMP"
            cp rules/app/UKAPP.MANUAL.list rules/app/UKAPP.list # Fallback to manual
          fi

      - name: Download NorthwestEuropeAPP rules
        run: |
          cp rules/app/NorthwestEurope.MANUAL.list rules/app/NorthwestEurope.list.new
          mv -f rules/app/NorthwestEurope.list.new rules/app/NorthwestEurope.list

      - name: Download JPAPP rules
        run: |
          cp rules/app/JPAPP.MANUAL.list rules/app/JPAPP.list.new
          mv -f rules/app/JPAPP.list.new rules/app/JPAPP.list

      - name: Download HKAPP rules
        run: |
          cp -f rules/app/HKAPP.MANUAL.list rules/app/HKAPP.MANUAL.list.new
          mv -f rules/app/HKAPP.MANUAL.list.new rules/app/HKAPP.list

      - name: Download eBay rules
        run: |
          EBAY_LIST_NEW="rules/app/eBay.list.new"
          EBAY_LIST_FINAL="rules/app/eBay.list"
          echo "Downloading eBay list..."
          if curl -f -s -o "$EBAY_LIST_NEW" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/eBay/eBay.list && [[ -s "$EBAY_LIST_NEW" ]]; then
            echo "eBay list downloaded successfully. Adding manual rules..."
            # (Add manual rules logic remains the same)
            echo "# Manual additions for eBay" >> "$EBAY_LIST_NEW"
            echo "DOMAIN-KEYWORD,ebay" >> "$EBAY_LIST_NEW"
            echo "DOMAIN-KEYWORD,e-bay" >> "$EBAY_LIST_NEW"
            echo "DOMAIN-SUFFIX,perfdrive.com" >> "$EBAY_LIST_NEW"
            echo "DOMAIN-SUFFIX,forter.com" >> "$EBAY_LIST_NEW"
            echo "DOMAIN-KEYWORD,forter" >> "$EBAY_LIST_NEW"
            echo >> "$EBAY_LIST_NEW"
            sort -u "$EBAY_LIST_NEW" -o "$EBAY_LIST_NEW"
            mv -f "$EBAY_LIST_NEW" "$EBAY_LIST_FINAL"
            echo "Generated eBay.list"
          else
            echo "::error::Failed to download or empty eBay.list. File not updated."
            rm -f "$EBAY_LIST_NEW"
          fi

      - name: Download Telegram rules
        run: |
          if  curl -f -s -o rules/app/telegramcidr.txt https://raw.githubusercontent.com/Loyalsoldier/clash-rules/release/telegramcidr.txt && [[ -s rules/app/telegramcidr.txt ]]; then
            echo "" > rules/app/telegramcidr.list.new
            while IFS= read -r line; 
            do
              ip=$(echo $line | sed "s/  - '//" | sed "s/'//" | sed 's/-//g' | sed "s/'//g"| sed "s/ //g")
              if [[ $ip =~ .*:.* ]]
              then
                echo "IP-CIDR6,$ip,no-resolve" >> rules/app/telegramcidr.list.new
              else
                echo "IP-CIDR,$ip,no-resolve" >> rules/app/telegramcidr.list.new
              fi
            done < <(tail -n +2 rules/app/telegramcidr.txt)
            mv -f rules/app/telegramcidr.list.new rules/app/telegramcidr.list
            sed -i '/^$/d' rules/app/telegramcidr.list
            rm -f rules/app/telegramcidr.list.new rules/app/telegramcidr.txt
            if  curl -f -s -o rules/app/telegramdomain.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Telegram/Telegram.list && [[ -s rules/app/telegramdomain.list ]]; then
              cat rules/app/telegramcidr.list rules/app/telegramdomain.list > rules/app/telegram.list.new
              mv -f rules/app/telegram.list.new rules/app/telegram.list
              rm -f rules/app/telegramcidr.list rules/app/telegramdomain.list
            else
              echo "Failed to download or empty telegramdomain.list, exiting."
            fi
          else
            echo "Failed to download or empty telegramcidr.txt, exiting."
          fi

      - name: Download Apple rules
        run: |
          APPLE_LIST_NEW="rules/app/Apple.list.new"
          echo "Downloading Apple list..."
          if curl -f -s -o "$APPLE_LIST_NEW" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Apple/Apple.list && [[ -s "$APPLE_LIST_NEW" ]]; then
            mv -f "$APPLE_LIST_NEW" rules/app/Apple.list
            echo "Downloaded Apple.list"
          else
            echo "::error::Failed to download or empty Apple.list. File not updated."
            rm -f "$APPLE_LIST_NEW"
          fi

      - name: Download GoogleFCM rules
        run: |
          GCM_LIST_NEW="rules/app/GoogleFCM.list.new"
          GCM_LIST_FINAL="rules/app/GoogleFCM.list"
          echo "Downloading GoogleFCM list..."
          if curl -f -s -o "$GCM_LIST_NEW" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/GoogleFCM/GoogleFCM.list && [[ -s "$GCM_LIST_NEW" ]]; then
            echo "GoogleFCM list downloaded successfully. Adding manual rules..."
            # (Manual additions logic remains the same)
            echo "# Manual additions for GoogleFCM" >> "$GCM_LIST_NEW"
            echo "PROCESS-NAME,com.google.android.gms" >> "$GCM_LIST_NEW"
            echo "PROCESS-NAME-REGEX,android\.gms" >> "$GCM_LIST_NEW"
            echo "DOMAIN-SUFFIX,mtalk.google.com" >> "$GCM_LIST_NEW"
            echo "DOMAIN-SUFFIX,mtalk4.google.com" >> "$GCM_LIST_NEW"
            echo "DOMAIN-SUFFIX,mtalk-staging.google.com" >> "$GCM_LIST_NEW"
            echo "DOMAIN-SUFFIX,mtalk-dev.google.com" >> "$GCM_LIST_NEW"
            echo >> "$GCM_LIST_NEW"
            sort -u "$GCM_LIST_NEW" -o "$GCM_LIST_NEW"
            mv -f "$GCM_LIST_NEW" "$GCM_LIST_FINAL"
            echo "Generated GoogleFCM.list"
          else
            echo "::error::Failed to download or empty GoogleFCM.list. File not updated."
            rm -f "$GCM_LIST_NEW"
          fi

      - name: Download Google rules
        run: |
          GOOGLE_LIST_TMP="rules/app/Google.list.tmp"
          GOOGLE_LIST_NEW="rules/app/Google.list.new"
          echo "Downloading Google list component..."
          if curl -f -s -o "$GOOGLE_LIST_TMP" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Google/Google.list && [[ -s "$GOOGLE_LIST_TMP" ]]; then
            echo "Google list component downloaded successfully."
            echo >> "$GOOGLE_LIST_TMP"
            cat "$GOOGLE_LIST_TMP" rules/app/Google.MANUAL.list > "$GOOGLE_LIST_NEW"
            sort -u "$GOOGLE_LIST_NEW" -o "$GOOGLE_LIST_NEW"
            mv -f "$GOOGLE_LIST_NEW" rules/app/Google.list
            echo "Generated Google.list"
            rm -f "$GOOGLE_LIST_TMP"
          else
            echo "::error::Failed to download Google list component. Google.list generated from MANUAL only."
            rm -f "$GOOGLE_LIST_TMP"
            cp rules/app/Google.MANUAL.list rules/app/Google.list # Fallback to manual
          fi

      - name: Download Youtube rules
        run: |
          YOUTUBE_LIST_NEW="rules/app/Youtube.list.new"
          echo "Downloading Youtube list..."
          if curl -f -s -o "$YOUTUBE_LIST_NEW" https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/YouTube/YouTube.list && [[ -s "$YOUTUBE_LIST_NEW" ]]; then
            mv -f "$YOUTUBE_LIST_NEW" rules/app/Youtube.list
            echo "Downloaded Youtube.list"
          else
            echo "::error::Failed to download or empty Youtube.list. File not updated."
            rm -f "$YOUTUBE_LIST_NEW"
          fi

      - name: Download Onedrive rules
        run: |
          files=(
            "Onedrive.blackmatrix7.list|https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/OneDrive/OneDrive.list"
            "Onedrive.ACL4SSR.list|https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/OneDrive.list"
          )
          downloaded_files=()
          successful_downloads=()
          download_dir="rules/app"
          echo "Downloading Onedrive components..."
          for entry in "${files[@]}"; do
            IFS='|' read -r filename url <<< "$entry"
            output_path="${download_dir}/${filename}.tmp"
            downloaded_files+=("$output_path")
            echo "Downloading $filename from $url..."
            if ! curl -f -L -s -o "$output_path" "$url" || [[ ! -s "$output_path" ]]; then
              echo "::error::Failed to download or empty file: $filename from $url. Skipping this file."
            else
              echo "Successfully downloaded $filename."
              echo >> "$output_path"
              successful_downloads+=("$output_path")
            fi
          done

          if [ ${#successful_downloads[@]} -gt 0 ]; then
             echo "Combining successfully downloaded Onedrive rules..."
             cat "${successful_downloads[@]}" "${download_dir}/Onedrive.MANUAL.list" > "${download_dir}/Onedrive.list.new"
             echo >> "${download_dir}/Onedrive.list.new"
             sort -u "${download_dir}/Onedrive.list.new" -o "${download_dir}/Onedrive.list.new"
             mv -f "${download_dir}/Onedrive.list.new" "${download_dir}/Onedrive.list"
             echo "Generated Onedrive.list with available rules."
          else
             echo "::warning::All Onedrive component downloads failed. Onedrive.list not generated from downloads."
             echo "Copying Onedrive.MANUAL.list to Onedrive.list as fallback."
             cp "${download_dir}/Onedrive.MANUAL.list" "${download_dir}/Onedrive.list"
          fi

      - name: Download MicrosoftHA rules
        run: |
          cp -f rules/app/MicrosoftHA.MANUAL.list rules/app/MicrosoftHA.list.new
          echo >> rules/app/MicrosoftHA.list.new
          mv -f rules/app/MicrosoftHA.list.new rules/app/MicrosoftHA.list

      - name: Download Microsoft rules
        run: |
          if curl -f -s -o rules/app/Microsoft.1.list https://raw.githubusercontent.com/blackmatrix7/ios_rule_script/master/rule/Clash/Microsoft/Microsoft.list && [[ -s rules/app/Microsoft.1.list ]]; then
            echo >> rules/app/Microsoft.1.list
            cat rules/app/Microsoft.1.list rules/app/Microsoft.MANUAL.list > rules/app/Microsoft.list.new
            mv -f rules/app/Microsoft.list.new rules/app/Microsoft.list
            rm -f rules/app/Microsoft.1.list
          else
            echo "Failed to download or empty Microsoft.list, exiting."
          fi

      - name: Add changes to the repository
        run: |
          git add .
          git status

      - name: Commit and push changes
        run: |
          git commit -m "Special-rule-update" -a
          git push
